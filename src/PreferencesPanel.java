/*
 * PreferencesPanel.java
 *
 * Created on July 23, 2008, 9:27 PM
 */

import java.io.*;
import javax.swing.*;

/**
 *
 * @author  Sharafat
 */
public class PreferencesPanel extends javax.swing.JPanel {

    /** Creates new form PreferencesPanel */
    public PreferencesPanel() {
        initComponents();
    }

    void setPreferences(Preferences preferences) {
        if (!preferences.shouldDoSilentScan) {
            silentScan.setSelected(false);
        }
        if (preferences.suspectedFileAction == 1) {
            promptSuspect.setSelected(false);
            delSuspect.setSelected(true);
        } else if (preferences.suspectedFileAction == 2) {
            promptSuspect.setSelected(false);
            quarantineSuspect.setSelected(true);            
        } else if (preferences.suspectedFileAction == 3) {
            promptSuspect.setSelected(false);
            leaveSuspect.setSelected(true);
        }
        if (!preferences.shouldShowSlideInScanDialog) {
            showSlidingMsg.setSelected(false);
        }
        if (preferences.shouldRemoveSlideInDialogAfterScan) {
            removeSlidingMsg.setSelected(true);
        }
        if (preferences.shouldAlwaysDisplayScanDetails) {
            displayScanWindow.setSelected(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        suspectActionGroup = new javax.swing.ButtonGroup();
        explanationPanel = new javax.swing.JPanel();
        explanation = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        delSuspect = new javax.swing.JRadioButton();
        silentScan = new javax.swing.JCheckBox();
        quarantineSuspect = new javax.swing.JRadioButton();
        leaveSuspect = new javax.swing.JRadioButton();
        promptSuspect = new javax.swing.JCheckBox();
        balloonMsgDisplay = new javax.swing.JPanel();
        removeSlidingMsg = new javax.swing.JCheckBox();
        showSlidingMsg = new javax.swing.JCheckBox();
        displayScanWindow = new javax.swing.JCheckBox();
        save = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        explanationPanel.setBackground(new java.awt.Color(255, 255, 255));
        explanationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Explanation"));

        explanation.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout explanationPanelLayout = new javax.swing.GroupLayout(explanationPanel);
        explanationPanel.setLayout(explanationPanelLayout);
        explanationPanelLayout.setHorizontalGroup(
            explanationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(explanation, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
        );
        explanationPanelLayout.setVerticalGroup(
            explanationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(explanation, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Scanning Options"));

        delSuspect.setBackground(new java.awt.Color(255, 255, 255));
        suspectActionGroup.add(delSuspect);
        delSuspect.setMnemonic('D');
        delSuspect.setText("Delete all suspected files");
        delSuspect.setEnabled(false);
        delSuspect.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        delSuspect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                delSuspectMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                delSuspectMouseExited(evt);
            }
        });

        silentScan.setBackground(new java.awt.Color(255, 255, 255));
        silentScan.setMnemonic('I');
        silentScan.setSelected(true);
        silentScan.setText("Silent scan (Recommended)");
        silentScan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                silentScanMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                silentScanMouseExited(evt);
            }
        });

        quarantineSuspect.setBackground(new java.awt.Color(255, 255, 255));
        suspectActionGroup.add(quarantineSuspect);
        quarantineSuspect.setMnemonic('Q');
        quarantineSuspect.setText("Quarantine all suspected files");
        quarantineSuspect.setEnabled(false);
        quarantineSuspect.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        quarantineSuspect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                quarantineSuspectMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                quarantineSuspectMouseExited(evt);
            }
        });

        leaveSuspect.setBackground(new java.awt.Color(255, 255, 255));
        suspectActionGroup.add(leaveSuspect);
        leaveSuspect.setMnemonic('L');
        leaveSuspect.setSelected(true);
        leaveSuspect.setText("Leave all suspected files");
        leaveSuspect.setEnabled(false);
        leaveSuspect.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        leaveSuspect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                leaveSuspectMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                leaveSuspectMouseExited(evt);
            }
        });

        promptSuspect.setBackground(new java.awt.Color(255, 255, 255));
        promptSuspect.setMnemonic('P');
        promptSuspect.setSelected(true);
        promptSuspect.setText("Prompt for action against suspected files (Highly Recommended)");
        promptSuspect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                promptSuspectMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                promptSuspectMouseExited(evt);
            }
        });
        promptSuspect.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                promptSuspectStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(promptSuspect)
                    .addComponent(silentScan)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delSuspect)
                            .addComponent(leaveSuspect)
                            .addComponent(quarantineSuspect, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(silentScan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(promptSuspect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delSuspect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quarantineSuspect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leaveSuspect))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {delSuspect, leaveSuspect, quarantineSuspect});

        balloonMsgDisplay.setBackground(new java.awt.Color(255, 255, 255));
        balloonMsgDisplay.setBorder(javax.swing.BorderFactory.createTitledBorder("Scan Notification Options"));
        balloonMsgDisplay.setName("balloonMsgDisplay"); // NOI18N

        removeSlidingMsg.setBackground(new java.awt.Color(255, 255, 255));
        removeSlidingMsg.setMnemonic('F');
        removeSlidingMsg.setText("Remove slide-in dialogs after scanning is finished");
        removeSlidingMsg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        removeSlidingMsg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                removeSlidingMsgMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                removeSlidingMsgMouseExited(evt);
            }
        });

        showSlidingMsg.setBackground(new java.awt.Color(255, 255, 255));
        showSlidingMsg.setMnemonic('E');
        showSlidingMsg.setSelected(true);
        showSlidingMsg.setText("Show scanning progress in slide-in dialog form");
        showSlidingMsg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        showSlidingMsg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showSlidingMsgMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showSlidingMsgMouseExited(evt);
            }
        });
        showSlidingMsg.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                showSlidingMsgStateChanged(evt);
            }
        });

        displayScanWindow.setBackground(new java.awt.Color(255, 255, 255));
        displayScanWindow.setMnemonic('A');
        displayScanWindow.setText("Always display Scanning Details window");
        displayScanWindow.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        displayScanWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                displayScanWindowMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                displayScanWindowMouseExited(evt);
            }
        });

        javax.swing.GroupLayout balloonMsgDisplayLayout = new javax.swing.GroupLayout(balloonMsgDisplay);
        balloonMsgDisplay.setLayout(balloonMsgDisplayLayout);
        balloonMsgDisplayLayout.setHorizontalGroup(
            balloonMsgDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(balloonMsgDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(balloonMsgDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showSlidingMsg)
                    .addComponent(removeSlidingMsg)
                    .addComponent(displayScanWindow))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        balloonMsgDisplayLayout.setVerticalGroup(
            balloonMsgDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(balloonMsgDisplayLayout.createSequentialGroup()
                .addComponent(showSlidingMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeSlidingMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayScanWindow))
        );

        save.setBackground(new java.awt.Color(255, 255, 255));
        save.setMnemonic('C');
        save.setText("Save Changes");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(explanationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(balloonMsgDisplay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(save))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(balloonMsgDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(explanationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save))
        );
    }// </editor-fold>//GEN-END:initComponents

private void silentScanMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_silentScanMouseEntered
    explanation.setText("<html><p style='text-align:justify'><b>Silent scan</b><br>Automatically "
            + "deletes detected worm files if selected. "
            + "Prompts for action if not selected.<br>Recommended for most general users.</p></html>");
}//GEN-LAST:event_silentScanMouseEntered

private void silentScanMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_silentScanMouseExited
    explanation.setText("");
}//GEN-LAST:event_silentScanMouseExited

private void promptSuspectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_promptSuspectMouseEntered
    explanation.setText("<html><p style='text-align:justify'><b>Prompt for action against suspected "
            + "files</b><br>If selected, the program will display those files which it suspects as worms, "
            + "but is not confident enough to delete them.<br>It is highly recommended to select this "
            + "option as some of those files might be worm files and leaving them might result in "
            + "worm attack; or, some of those files migt be genuine files and deleting them might cause "
            + "loss of data.</p></html>");
}//GEN-LAST:event_promptSuspectMouseEntered

private void promptSuspectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_promptSuspectMouseExited
    explanation.setText("");
}//GEN-LAST:event_promptSuspectMouseExited

private void delSuspectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delSuspectMouseEntered
    explanation.setText("<html><b>Delete all suspected files</b><br>"
            + "Deletes all suspected files without user's approval.</html>");
}//GEN-LAST:event_delSuspectMouseEntered

private void delSuspectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delSuspectMouseExited
    explanation.setText("");
}//GEN-LAST:event_delSuspectMouseExited

private void quarantineSuspectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quarantineSuspectMouseEntered
    explanation.setText("<html><b>Quarantine all suspected files</b><br>"
            + "Quarantines all suspected files without user's approval.</html>");
}//GEN-LAST:event_quarantineSuspectMouseEntered

private void quarantineSuspectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quarantineSuspectMouseExited
    explanation.setText("");
}//GEN-LAST:event_quarantineSuspectMouseExited

private void leaveSuspectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leaveSuspectMouseEntered
    explanation.setText("<html><b>Leave all suspected files</b><br>"
            + "Leaves all suspected files as they are.</html>");
}//GEN-LAST:event_leaveSuspectMouseEntered

private void leaveSuspectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leaveSuspectMouseExited
    explanation.setText("");
}//GEN-LAST:event_leaveSuspectMouseExited

private void removeSlidingMsgMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSlidingMsgMouseEntered
    explanation.setText("<html><p style='text-align:justify'><b>Remove slide-in dialogs after scanning is finished</b><br>"
            + "If checked, removes the scanning progress slide-in dialogs at the end of scanning."
            + "<br>If unchecked, keeps the dialogs on-screen even after scanning is finished.</p></html>");
}//GEN-LAST:event_removeSlidingMsgMouseEntered

private void removeSlidingMsgMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSlidingMsgMouseExited
    explanation.setText("");
}//GEN-LAST:event_removeSlidingMsgMouseExited

private void displayScanWindowMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayScanWindowMouseEntered
    explanation.setText("<html><p style='text-align:justify'><b>Always display Scanning Details window</b><br>"
            + "If checked, the Scanning Details window will be displayed "
            + "whenever scanning a USB mass storage device is started.<br>If this option is unchecked, however, the window can "
            + "still be accessed anytime from the main window or by clicking on the \"Details\" link on the slide-in dialogs.</p></html>");
}//GEN-LAST:event_displayScanWindowMouseEntered

private void displayScanWindowMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayScanWindowMouseExited
    explanation.setText("");
}//GEN-LAST:event_displayScanWindowMouseExited

private void showSlidingMsgMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showSlidingMsgMouseEntered
    explanation.setText("<html><p style='text-align:justify'><b>Show scanning progress in slide-in dialog form</b><br>"
            + "If selected, a slide-in dialog appears at the bottom-right corner of the screen "
            + "whenever a new drive is detected. The dialog displays the scanning progress of the current "
            + "drive.<br>If this option is unchecked, the user will not be notified of the commence of a "
            + "scan unless the \"Always display Scanning Details window\" option is selected.</p></html>");
}//GEN-LAST:event_showSlidingMsgMouseEntered

private void showSlidingMsgMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showSlidingMsgMouseExited
    explanation.setText("");
}//GEN-LAST:event_showSlidingMsgMouseExited

private void promptSuspectStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_promptSuspectStateChanged
    if (promptSuspect.isSelected()) {
        delSuspect.setEnabled(false);
        quarantineSuspect.setEnabled(false);
        leaveSuspect.setEnabled(false);
    } else {
        delSuspect.setEnabled(true);
        quarantineSuspect.setEnabled(true);
        leaveSuspect.setEnabled(true);
    }
}//GEN-LAST:event_promptSuspectStateChanged

private void showSlidingMsgStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_showSlidingMsgStateChanged
    if (showSlidingMsg.isSelected()) {
        removeSlidingMsg.setEnabled(true);
    } else {
        removeSlidingMsg.setEnabled(false);
    }
}//GEN-LAST:event_showSlidingMsgStateChanged

private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
    Preferences preferences = new Preferences();
    
    File prefFile = new File("preferences.dat");                
    boolean prefFileExists = prefFile.exists();
    if (prefFileExists) {        
        ObjectInputStream obin = null;
        try {
            obin = new ObjectInputStream(new FileInputStream("preferences.dat"));
            preferences = (Preferences) obin.readObject();            
        } catch (Exception e) {
        } finally {
            try {
                obin.close();
            } catch (Exception e) {}
        }
    }

    if (silentScan.isSelected()) {
        preferences.shouldDoSilentScan = true;
    } else {
        preferences.shouldDoSilentScan = false;
    }
    
    if (promptSuspect.isSelected()) {
        preferences.suspectedFileAction = 0;
    } else if (delSuspect.isSelected()) {
        preferences.suspectedFileAction = 1;
    } else if (quarantineSuspect.isSelected()) {
        preferences.suspectedFileAction = 2;
    } else {
        preferences.suspectedFileAction = 3;
    }
    
    if (showSlidingMsg.isSelected()){
        preferences.shouldShowSlideInScanDialog = true;
    } else {
        preferences.shouldShowSlideInScanDialog = false;
    }
    
    if (removeSlidingMsg.isSelected()) {
        preferences.shouldRemoveSlideInDialogAfterScan = true;
    } else {
        preferences.shouldRemoveSlideInDialogAfterScan = false;
    }
    
    if (displayScanWindow.isSelected()) {
        preferences.shouldAlwaysDisplayScanDetails = true;
    } else {
        preferences.shouldAlwaysDisplayScanDetails = false;
    }
    
    ObjectOutputStream obout = null;
    try {
        obout = new ObjectOutputStream(new FileOutputStream("preferences.dat"));
        obout.writeObject(preferences);        
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error: Cannot save preferences:\n" + e,
                "USB Worm Protection", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            obout.close();
        } catch (IOException e) {}
    }
    
    JOptionPane.showMessageDialog(this, "Changes will take effect the next time" 
            + " USB Worm Protection is started.", "USB Worm Protection",
            JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_saveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel balloonMsgDisplay;
    private javax.swing.JRadioButton delSuspect;
    private javax.swing.JCheckBox displayScanWindow;
    private javax.swing.JLabel explanation;
    private javax.swing.JPanel explanationPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton leaveSuspect;
    private javax.swing.JCheckBox promptSuspect;
    private javax.swing.JRadioButton quarantineSuspect;
    private javax.swing.JCheckBox removeSlidingMsg;
    private javax.swing.JButton save;
    private javax.swing.JCheckBox showSlidingMsg;
    private javax.swing.JCheckBox silentScan;
    private javax.swing.ButtonGroup suspectActionGroup;
    // End of variables declaration//GEN-END:variables
}
